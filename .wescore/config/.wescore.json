{
  "runInParallel": false,
  "stopOnFail": true,
  "commandTimeout": 300000,
  "logLevel": "info",
  "checks": [
    {
      "id": "format",
      "name": "Formatting (Prettier)",
      "command": "npm run format",
      "description": "Checks code formatting using Prettier based on .prettierrc.json"
    },
    {
      "id": "lint",
      "name": "Linting (ESLint)",
      "command": "npm run lint",
      "description": "Checks for code style and potential errors using ESLint based on eslint.config.mjs"
    },
    {
      "id": "smells",
      "name": "Code Smell Analysis (ESLint/SonarJS)",
      "command": "npm run lint:smells",
      "enabled": true,
      "description": "Detects potential code smells and maintainability issues."
    },
    {
      "id": "typecheck",
      "name": "Type Checking (TSC)",
      "command": "npm run typecheck",
      "description": "Performs static type checking using the TypeScript Compiler based on tsconfig.json"
    },
    {
      "id": "test",
      "name": "Unit & Integration Tests (Jest)",
      "command": "npm run test",
      "description": "Executes the test suite using Jest to ensure code correctness."
    },
    {
      "id": "build",
      "name": "Production Build (Next.js)",
      "command": "npm run build",
      "description": "Attempts a production build to catch build-time errors and ensure deployability."
    }
  ],
  "errorCategories": {
    "format": {
      "patterns": [
        "SyntaxError:",
        "\\[error\\]",
        "Parsing error:",
        "needs formatting",
        "Check format"
      ],
      "suggestion": "Execute `npm run format` to automatically format the codebase. Review changes carefully. Ensure the entire codebase is uniformly formatted."
    },
    "lint": {
      "patterns": [
        "^\\s*\\d+:\\d+\\s+Error:",
        "^\\./.*?:$",
        "Parsing error:",
        "@typescript-eslint/",
        "Error:",
        "eslint"
      ],
      "suggestion": "Execute `npm run lint --fix` for auto-fixable issues. Manually address remaining violations reported in the output. Repeat until the lint check passes cleanly."
    },
    "typecheck": {
      "patterns": [
        "^.*?\\.tsx?\\(\\d+,\\d+\\): error TS\\d+:.*$",
        "Could not find a declaration file for module",
        "Type error:"
      ],
      "suggestion": "Execute `npm run typecheck` and meticulously analyze the output. Resolve all identified TypeScript errors and inconsistencies until the codebase achieves complete type safety."
    },
    "build": {
      "patterns": [
        "Failed to compile",
        "Build failed",
        "SyntaxError:",
        "Module not found:",
        "Error:.*?Expected",
        "Could not find a required file",
        "Build error occurred"
      ],
      "suggestion": "Build failed. Examine the build log above for specific errors (e.g., 'Module not found', 'SyntaxError'). Check configuration files ('next.config.js', 'tsconfig.json'), dependencies ('package.json' - try running 'npm install'), and ensure environment variables are set correctly. Running 'npm run typecheck' or 'npm run lint' might reveal underlying issues."
    },
    "test": {
      "patterns": [
        "FAIL",
        "Test failed",
        "Test suite failed",
        "expect\\(.*?\\)\\.",
        " encountered an error"
      ],
      "suggestion": "Test failures detected. Review test output for specific failures, check test assertions and mock data. Run individual test files (e.g., `npx jest path/to/test.spec.ts`) to isolate issues. Ensure test environment and dependencies are properly configured. Fix failing tests before proceeding."
    }
  }
}
